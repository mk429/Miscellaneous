#!/usr/bin/env ruby

require 'open3'
require 'mrdialog'

MenuItem = Struct.new(:tag, :item, :object)

class PsProcess
  attr_reader :pid, :command

  def initialize(pid, command)
    @pid = pid
    @command = command
  end

  def menu_item
    MenuItem.new(pid, command, self)
  end
end

class Descriptor
  attr_reader :id, :path

  def initialize(id, path)
    @id = id
    @path = path
  end

  def menu_item
    MenuItem.new(id, path, self)
  end
end

class FdProgress
  attr_reader :command, :fd_num, :skip_msgbox

  def initialize(command, fd_num, skip_msgbox)
    @command = command
    @fd_num = fd_num
    @skip_msgbox = skip_msgbox
  end

  def run
    process = menu('Select a process', processes.map(&:menu_item))
    descriptors_for_process = descriptors(process.pid)
    descriptor = fd_num ? descriptors_for_process[fd_num.to_i] : menu('Select a file descriptor', descriptors_for_process.map(&:menu_item))
    gauge(process, descriptor)
    msgbox unless skip_msgbox
    exec('clear')
  end

  private

  def fd_path(pid, descriptor_id)
    "/proc/#{pid}/fd/#{descriptor_id}"
  end

  def fd_info_path(pid, descriptor_id)
    "/proc/#{pid}/fdinfo/#{descriptor_id}"
  end

  def processes
    ps_output, _ = Open3.capture2('ps', '--no-headers', '-o', 'pid,cmd', '-C', command)
    ps_output.split("\n").map { |ps_row| PsProcess.new(*ps_row.split(' ', 2)) }
  end

  def descriptors(pid)
    Dir[fd_path(pid, '*')].map do |path|
      Descriptor.new(
        path.split('/')[-1],
        File.readlink(path)
      )
    end
  end

  def progress(pid, descriptor_id, size)
    path = fd_info_path(pid, descriptor_id)
    current_progress = File.readlines(path)[0].split("\t")[1].chomp.to_i
    current_progress * 100 / size
  rescue
    100
  end

  def menu(title, items)
    return items[0].object if items.length == 1
    dialog = MRDialog.new
    dialog.clear = true
    dialog.title = title
    tag = dialog.menu('', items, 0, 0, items.count)
    items.find { |item| item.tag == tag }.object
  end

  def gauge(process, descriptor)
    dialog = MRDialog.new
    dialog.clear = true
    dialog.title = 'File Progress'
    description1 = "Running #{process.command}"[0, 110]
    description2 = "Reading file #{descriptor.path}"[0, 110]
    size = File.size?(descriptor.path)
    progress = progress(process.pid, descriptor.id, size)
    dialog.gauge(process.command, 9, 120, progress) do |f|
      while progress < 100 do
        progress = progress(process.pid, descriptor.id, size)
        f.puts 'XXX'
        f.puts progress
        f.puts description1
        f.puts ''
        f.puts description2
        f.puts ''
        f.puts 'XXX'
        sleep 1
      end
    end
  end

  def msgbox
    dialog = MRDialog.new
    dialog.clear = true
    dialog.title = 'Complete'
    dialog.msgbox("\nFile read complete", 7, 23)
  end
end

command = ARGV[0]
fd_num = ARGV[1]
skip_msgbox = ARGV[2]
unless command
  puts 'Usage: fd-progress <command name> [<fd number>]' unless command
  exit 1
end

FdProgress.new(command, fd_num, skip_msgbox).run
