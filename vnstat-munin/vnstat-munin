#!/usr/bin/env ruby

require "json"

class VnstatMunin
  DAILY_MODE = :daily
  MONTHLY_MODE = :monthly

  attr_reader :mode, :interface_name

  def initialize(mode:, interface_name:)
    @mode = mode
    @interface_name = interface_name
  end

  def config
    puts <<~EOF
      graph_title #{graph_title}
      graph_args --base 1000 --lower-limit 0
      graph_vlabel Cumulative Usage
      graph_category network
      graph_info Total network traffic, cumulative #{mode}.
      total.label Total
      total.info Total data sent and received.
      total.cdef total,1024,*
      totaltx.label Sent
      totaltx.info Total data sent.
      totaltx.cdef totaltx,1024,*
      totalrx.label Received
      totalrx.info Total data received.
      totalrx.cdef totalrx,1024,*
EOF
  end

  def update
    puts "totaltx.value #{usage[:tx]}"
    puts "totalrx.value #{usage[:rx]}"
    puts "total.value #{usage[:total]}"
  end

  private def graph_title
    if mode == DAILY_MODE
      'Traffic usage (daily)'
    else
      'Traffic usage (monthly)'
    end
  end

  private def vnstat_json
    @vnstat_json ||= JSON.parse(`vnstat --json`)
  end

  private def usage
    period = get_latest_period(period_type: mode == DAILY_MODE ? "days" : "months")
    {
      rx: period["rx"],
      tx: period["tx"],
      total: period["rx"] + period["tx"]
    }
  end

  private def selected_interface
    vnstat_json["interfaces"].find { |interface| interface["id"] == interface_name }
  end

  private def get_latest_period(period_type:)
    selected_interface["traffic"][period_type].find { |period| period["id"] == 0 }
  end

end

# Figure out what mode to run in from script name
called_as = File.basename($0)
_, mode, interface_name = called_as.split("_")
mode = mode != "daily" ? VnstatMunin::MONTHLY_MODE : VnstatMunin::DAILY_MODE
interface_name ||= "eth0"

vnstat = VnstatMunin.new(mode: mode, interface_name: interface_name)
case ARGV[0]
when "config"
  vnstat.config
else
  vnstat.update
end
